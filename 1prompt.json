[
  {
    "title": "onepromptSite Home Page",
    "url": "https://onepromptsites.com",
    "previewImage": "https://api.microlink.io/?url=https://onepromptsites.com&screenshot=true&embed=screenshot.url",
    "prompt": "Create a homepage for a project called\n  \"OnePromptSites\" — a visually striking, modern directory that\n  showcases websites created from a single AI prompt.\n    \n    The homepage should include:\n    \n    – Title: “OnePromptSites”\n    – Below the title, show a subheading that cycles slowly every few seconds\n  between the following SEO-visible phrases with a soft fade transition:\n    • One prompt, one site – infinite possibilities.\n    • Microstartups, macro inspiration – all built with a single prompt.\n    • One idea. One prompt. Zero code. Witness the magic.\n    • From prompt to product: see one‑prompt wonders in action.\n    • AI alchemy – turning a one‑line prompt into a live website.\n    – Below the subheading, include this static intro paragraph:\n    \"OnePromptSites is a curated archive of websites created from a single\n  AI prompt. Each entry reveals the exact prompt used, the tools involved, and\n  honest insights into what worked (and what didn’t). It's a behind-the-scenes\n  look at how far one good prompt can go.\"\n    – Under the intro paragraph, in smaller italicized text:\n    \"Built from one core AI prompt (with only minor edits for\n  polish)\"\n    – Beneath that, add a simple horizontal visual flow: OnePrompt → Site →\n  Launch\n    \n    Use the following JSON as the data an example of format to provide the code\n  in:\n  [https://raw.githubusercontent.com/dgriff86/oneprompt-json-host/refs/heads/main/1prompt.json](https://raw.githubusercontent.com/dgriff86/oneprompt-json-host/refs/heads/main/new1prompt.json)\n    \n    For each site entry:\n    – Show a screenshot using `previewImage` if present\n    – If missing, render a fallback card with:\n    • A clean, readable background\n    • Centered title\n    • Label: “Preview Not Available”\n    – Below the preview:\n    • Title (clickable, opens `url` in new tab)\n    • Date (from `createdAt`) in format like \"May 12, 2025\"\n    • A toggle dropdown: \"View Prompt\" → expands to show the full\n  `prompt` in a <pre> block, styled with high contrast and includes a\n  “Copy Prompt” button positioned at the top of the expanded area\n    • Optional toggle: \"Build Notes\" → show if any of the following\n  are present: `tool`, `whatWorked`, `whatDidntWork`, `nextSteps`\n    – If `notes` exist, display them subtly\n    – If `projurl` exists, display a small link or button labeled “Visit Live\n  Site” (opens in new tab)\n    \n    Below the card list:\n    – Paginate results (10 per page), sorted newest to oldest\n    – Navigation control at the bottom: “Previous / Next”\n    \n    Sponsor Block:\n    – If a sponsor image URL exists in the project code, show it in a styled banner\n    – Else show default:\n    • Heading: \"Sponsor this site\"\n    • Subtext: \"Get featured here — email\n  [sponsor@onepromptsites.com](mailto:sponsor@onepromptsites.com)\"\n    \n    SEO & Metadata:\n    – Title: OnePromptSites\n    – Meta description: A growing archive of websites built with one prompt\n  alone.\n    – Use default social image if none provided\n    \n    In public folder:\n    – Create a blank file named `sitemap.xml`, leave empty for manual\n  updates\n    \n    Favicon:\n    – Include standard <link rel=\"icon\"> markup in <head>\n  pointing to a favicon relevant to the site, using the provided image. Save\n  this as `favicon.ico` in the public root folder. This favicon must be\n  manually added to the directory.\n    \n    Footer:\n    – Centered: “Built with AI · One prompt at a time”",
    "createdAt": "2025-05-12",
    "notes": "Showcase of prompt generating the home page. Some\n  text edited in code directly after the prompt.",
    "tool": "Lovable.dev",
    "projurl": "",
    "whatWorked": "Simple and straightforward, I’ve been refining my\n  personal GPT to learn what works best.",
    "whatDidntWork": "1 code fix automatically cycled. I found that\n  trying to force a specific theme through detailed wording often restricted\n  the AI too much. Instead, I started attaching a reference image of the style\n  I wanted, that shift made a huge difference in how well the results matched\n  my vision.",
    "nextSteps": "Use this as the base for fivepromptsites.com. Might\n  take this off oneprompt to make it easier to manage in the future."
  },
  {
    "title": "GymBro Home Page",
    "url": "https://onepromptgymbro.com",
    "previewImage": "https://api.microlink.io/?url=https://onepromptgymbro.com&screenshot=true&embed=screenshot.url",
    "prompt": "Create a fully functional, mobile-first single-gym website\n  named \"onepromptGymBro\" that includes:\n    \n    - A public-facing user view\n    - A gym owner/admin dashboard\n    - Toggle-based layout switching with proper state management\n    \n    Design should reflect brands like F45 or CrossFit — clean, bold, minimal,\n  and optimized for mobile.\n    \n    ---\n    \n    Header & Toggle Controls (Responsive & Functional)\n    \n    - Fixed top nav bar with onepromptGymBro logo\n    - View toggle with 2 options:\n      - “User View”\n      - “Admin View”\n    - On mobile:\n      - Use a dropdown or tab switcher\n  for compact toggle\n      - Ensure tap targets are\n  touch-friendly\n    - Clicking a toggle:\n      - Updates a `viewMode` value in\n  localStorage (e.g., `user`, `admin`)\n      - Re-renders the page content based\n  on the selected mode\n    - On page load:\n      - Check localStorage for last used\n  `viewMode`\n      - Default to \"User View\"\n  if none found\n    - Each view must conditionally render its section — only one active view at\n  a time\n    \n    ---\n    \n    User View (Public Site)\n    \n    - Hero section with gym branding and CTA\n    - Enquiry form (name, email, phone, message)\n      - Stores to localStorage and shows\n  confirmation\n    - Daily Workout (pulls latest \"Published\" workout)\n    - Class Schedule (pre-filled or synced from Admin)\n    - Mobile-friendly footer\n    \n    ---\n    \n    Admin View (Gym Owner Dashboard)\n    \n    - Leads Panel\n      - Table of enquiries with notes +\n  follow-up email\n      - “Convert to Member” opens modal\n  with sign-up\n    - Members Panel\n      - List of members with editable\n  info\n      - Send Welcome/Exit emails\n    - Workout Manager\n      - Add/edit/delete workouts, mark\n  one as “Published”\n    - Class Scheduler\n      - Weekly grid of gym classes with\n  fields\n    \n    ---\n    \n    Data Handling\n    \n    - All data in localStorage: enquiries, members, workouts, schedules\n    - View toggle must persist and reflect changes live\n    \n    ---\n    \n    Styling\n    \n    - Responsive layout, sticky headers, collapsible panels on mobile\n    - Tabs, cards, and modals for clean UX\n    \n    ---\n    \n    User Stories\n    \n    1. As a visitor, I want to submit a contact form.\n    2. As a visitor, I want to view the daily workout.\n    3. As a visitor, I want to browse the class schedule.\n    4–11. As a gym owner, I want to manage leads, members, workouts, and\n  schedules with proper feedback and flow.\n    \n    ---\n    \n    Build Guidelines\n    \n    - No backend, only localStorage\n    - View toggle must:\n      - Set `viewMode` in\n  localStorage\n      - Load correct view on\n  refresh\n      - Ensure only active view content\n  is rendered",
    "createdAt": "2025-05-15",
    "notes": "Showcase of prompt generating the home page. Some\n  text edited in code directly after the prompt.",
    "tool": "Bolt.new",
    "projurl": "",
    "whatWorked": "This is my first site on bolt. Not sure I love it but will\n  continue testing",
    "whatDidntWork": "You can't force to much through AI. I really wanted a member\n  login section as well member engagement functions but the prompt just got too\n  sophisticated and AI couldn't keep up.",
    "nextSteps": "Member Portal + Health Tracking + Booking + Billing"
  },
  {
    "title": "EXCEL to JSON Home page",
    "url": "https://onepromtexceltojson.com",
    "previewImage": "https://api.microlink.io/?url=https://onepromtexceltojson.com&screenshot=true&embed=screenshot.url",
    "prompt": "Create a mobile-first web app that lets users paste Excel or\n  Google Sheets data — including complex, multiline cells — directly into an\n  interactive HTML table. This table should be editable, convertible to JSON,\n  and support clean output formatting.\n    \n    ---\n    \n    CORE GOAL  \n    Enable a seamless paste-from-Excel experience that accurately renders\n  pasted tables (including line breaks within cells) and allows real-time\n  editing, conversion, and download as JSON.\n    \n    ---\n    \n    PASTE & TABLE INPUT  \n    - Use a large, styled `<div contenteditable=\"true\">` as the\n  main paste zone.\n    - On paste:\n      - Intercept clipboard HTML using\n  `e.clipboardData.getData(\"text/html\")`\n      - Extract the `<table>`\n  element from the pasted content\n      - If no table is found, display a\n  gentle error message\n    - Render the extracted table visually, maintaining:\n      - Row/column structure\n      - Line breaks, paragraph spacing\n  inside cells\n      - Merged cells as separate values\n  (optional: flatten colspan/rowspan)\n      - Multiple rows of header data, if\n  present\n    \n    ---\n    \n    TABLE RENDERING  \n    - Display the table inside a styled, scrollable card with `rounded-2xl`,\n  `shadow`, and `p-4`\n    - Each cell should be editable using `contenteditable`\n    - Maintain a JSON object behind the scenes that stays in sync with\n  edits\n    \n    ---\n    \n    CONVERSION & OUTPUT  \n    - Provide the following output tools:\n      - “Convert to JSON” button →\n  creates structured array with headers as keys\n      - “Copy JSON” button → copies final\n  output\n      - “Download JSON” button →\n  downloads file\n      - Optional: \"Copy as CSV\"\n  or \"Download as .csv\"\n    - Preserve special characters, embedded line breaks, and whitespace in\n  output\n    - Output JSON should be pretty-printed, with a toggle for minified\n  output\n    \n    ---\n    \n    POWER FEATURES  \n    - “Clear Table” button → resets the entire paste/render area\n    - Find & Replace functionality:\n      - Search within entire table or\n  specific column\n      - Replace globally or\n  per-match\n    - Toggle for schema preview (key:type)\n    - Toggle between raw JSON view and table view\n    - Optional: Detect headers if missing and prompt user to define them\n    \n    ---\n    \n    VISUAL DESIGN  \n    - Tailwind-style UI:\n      - Paste area: `border-dashed`,\n  `p-4`, `text-gray-600`\n      - Table: clean white background,\n  subtle border, zebra striping\n      - Cells: `hover:bg-gray-100`,\n  editable cursor\n    - Responsive: works on mobile and desktop\n    - Smooth transitions when data is pasted, cleared, or toggled\n    - Footer: “Built with love · One prompt at a time” (centered, sticky on\n  mobile)\n    \n    ---\n    \n    ADVANCED OPTIONS (optional toggle drawer) \n  \n    - Merge rows with shared keys\n    - Validate field types\n    - Export multiple tables (if detected) as separate JSON objects\n    - Detect and split multiple tables if pasted in one go\n    \n    ---\n    \n    SEO & BACKEND  \n    - Include blank `sitemap.xml` in `public/`\n    - Title: “Paste Excel to Table to JSON”\n    - Description: “Paste Excel tables into editable HTML and export to clean\n  JSON instantly.”\n    - Meta viewport + favicon\n    \n    ---\n    \n    This project should feel magical: paste → render → edit → export. No\n  uploads. No config. Just flow.",
    "createdAt": "2025-05-16",
    "notes": "The site was built to make my life easier. There are other\n  converters but wanted easy copy and paste from excel tables.",
    "tool": "Lovable.dev",
    "projurl": "https://lovable.dev/projects/3436965a-5cd6-4cd3-96d1-ce92ad4d5dbf",
    "whatWorked": "Great simple clean site. Something I'll be using for my\n  projects going forward.",
    "whatDidntWork": "Lovable didn't build in a new favicon so stuck with the default… Site should\n  have been named onepromptEXCELtoJSON. Code was manually edited. Google AdSense slot request was\n  ignored by AI, will need to add it manually later if this concept works.",
    "nextSteps": "I would like support for multiple tables in one JSON to simulate multi-table\n  database structure. If successful, plans to remix into fivepromptSites concept."
  },
  {
    "title": "CafeConcept Home page",
    "url": "https://onepromptcafeconcept.com",
    "previewImage": "https://api.microlink.io/?url=https://www.onepromptcafeconcept.com/menu&screenshot=true&embed=screenshot.url",
    "prompt": "Build a fully functional, mobile-first café website called\n  Café Concept using this JSON as the complete data source:\n    \n    JSON URL:  \n    https://raw.githubusercontent.com/dgriff86/oneprompt-json-host/refs/heads/main/cafecocept.json\n    \n    ---\n    \n    Site Structure and Views\n    \n    1. Landing Page (Welcome View) \n  \n    - A warm hero section with the café name, a short welcome blurb, and a soft\n  background image  \n    - A clear call-to-action button labeled \"Browse Our Menu\" that\n  scrolls or transitions to the menu view \n  \n    - Optional elements include opening hours, location, or daily special\n    \n    2. Menu View (Customer Order Mode) \n  \n    - Load categories sorted by their sort_order field  \n    - Display menu_items grouped under each category  \n    - Use a compact, mobile-first grid layout with two tiles per row on mobile\n  and three or more on larger screens \n  \n    - Each menu tile should show the name, description, base price, and\n  availability status  \n    - Tapping a menu item opens a modal for selecting available add-ons,\n  sourced from addon_groups  \n    - Enforce rules for required selections and multiple selections where\n  applicable  \n    - Add-on pricing should update the item total dynamically  \n    - A floating cart icon or sticky footer should summarize selected\n  items  \n    - When the \"Place Order\" button is clicked:\n      - Route items to the correct prep\n  queue based on their prep_area\n      - Clear the cart completely\n      - Display a temporary confirmation\n  message such as \"Order Submitted\" for at least three seconds\n    \n    3. Prep Queues (Barista and Kitchen Split) \n  \n    - Every menu item includes a prep_area field that designates it as either\n  barista or kitchen  \n    - Orders should be automatically split into two separate queues based on\n  prep_area  \n    - Each queue operates independently and tracks items with statuses: queued,\n  in_progress, and done  \n    - Changing the status of an item in one queue should not affect items in\n  the other  \n    - Only the last three completed items should be displayed in each\n  queue  \n    - Older completed items should be auto-archived  \n    - Optionally include a manual \"Clear Completed\" button\n    \n    4. Admin Panel (Local Menu Editor) \n  \n    - A local-only admin interface using localStorage to persist changes  \n    - Allow full CRUD (create, read, update, delete) functionality for:\n      - menu_items\n      - categories\n      - addons\n      - addon_groups  \n    - Editable fields should include: name, base price, category, prep_area,\n  and availability  \n    - Admins should be able to assign or remove addon groups from menu\n  items  \n    - Include a button labeled \"Download JSON\" to export the current\n  data structure as a file\n    \n    5. Front-of-House Table Entry View \n  \n    - A staff-facing interface to enter and manage table orders  \n    - Allow selection or entry of a table number  \n    - Let staff build an order using the full menu UI, including addon\n  selection  \n    - Optionally support item-specific notes such as \"no sugar\" or\n  \"allergy: dairy\"  \n    - Once submitted, items should route automatically to their respective prep\n  queues  \n    - Display a list of active orders by table and optionally allow marking\n  them as paid or closed\n    \n    ---\n    \n    Navigation and View Switching\n    \n    - Include a persistent navigation bar or tab menu that allows switching\n  between these four views:\n      1. Menu View (Customer)\n      2. Prep Queues (Barista and\n  Kitchen)\n      3. Admin Panel (Local\n  Editing)\n      4. FOH Table Entry (Staff\n  Use)\n    \n    ---\n    \n    Styling and UX\n    \n    - Design should be mobile-first with responsive layouts for all\n  screens  \n    - Layout and typography should take inspiration from high-end Australian\n  cafés such as Industry Beans or Proud Mary \n  \n    - Prioritize compact menu cards, clean white space, and clear visual\n  hierarchy  \n    - Use smooth transitions, swipe-friendly interactions, and sticky action\n  buttons for better mobile usability \n  \n    - Use a neutral, modern color palette with no visual clutter  \n    - Add a footer with the message: \"Built with love · One prompt at a\n  time\"\n    \n    ---\n    \n    Fixes and Logic Notes\n    \n    - After submitting an order, always clear the cart by resetting its\n  state  \n    - Display a clear \"Order Submitted\" confirmation message that\n  remains visible for at least three seconds \n  \n    - Ensure barista and kitchen queues are handled independently and never\n  sync their states automatically  \n    - Limit displayed completed orders in each queue to the three most recent\n  items\n    \n    ---\n    \n    General Notes\n    \n    - All menu and structure data should be loaded directly from the external\n  JSON file  \n    - Do not hardcode any menu content \n  \n    - All admin edits should persist locally using localStorage  \n    - No backend services or login functionality are required  \n    - The website should continue working offline after the initial load",
    "createdAt": "2025-05-17",
    "notes": "I'm so happy with how this turned out! Tested out serving\n  dummy database tables through a JSON file and the functionality is awesome!",
    "tool": "Lovable.dev",
    "projurl": "https://lovable.dev/projects/1f8dfab4-38fc-4ff7-a725-8252d7c513b8",
    "whatWorked": "Functionality and menu admin is way better than expected. Can\n  edit and manage everything from pricing to add-ons. Separate kitchen and\n  barista queues for workflow works well.",
    "whatDidntWork": "8 code fix cycles. Minor bug that you can’t return\n  to landing page once in the menu. Customer initiated orders don’t provide the\n  option to enter name or table numbers. Favicon updated in a single separate\n  prompt. Lovables favicon anoys me.",
    "nextSteps": "Booking system > Billing and tax > Discounting and\n  Specials"
  },
  {
    "title": "I present Promptosauris",
    "url": "https://www.pomptosauris.com/",
    "previewImage": "https://api.microlink.io/?url=https://www.pomptosauris.com&screenshot=true&embed=screenshot.url",
    "prompt": "Create a polished, professional web app called “Promptosauris”\n  — a focused workspace for browsing, customizing, and managing AI\n  prompts.\n    \n    Use the following JSON as the data source:\n    https://raw.githubusercontent.com/dgriff86/oneprompt-json-host/main/promptosauris.json\n    \n    Each prompt includes:\n    - category (string)\n    - promptName (string)\n    - prompt (string, may include [TOPIC])\n    \n    ---\n    \n    Purpose:\n    Designed for professionals who regularly use AI tools in their workflows.\n  Users can quickly explore categorized prompts, personalize them with a topic,\n  and copy or pin frequently used ones for reuse.\n    \n    ---\n    \n    Layout Overview:\n    \n    1. **Header**\n    - App name: “Promptosauris”\n    - Subtext: “A smarter way to manage prompts”\n    - Top-right theme toggle (light/dark)\n    - Favicon: clean dinosaur icon or stylized “P”\n    \n    2. **Global Topic Field**\n    - Input labeled: “Set your topic to personalize prompts”\n    - Placeholder: “e.g. financial planning”\n    - Automatically replaces `[TOPIC]` wherever used\n    - Store in localStorage\n    \n    3. **Pinned Prompts**\n    - Display fixed above prompt list if any prompts are pinned\n    - Show compact tags or rows with:\n      - Prompt name\n      - Quick copy and remove\n  buttons\n    - Include \"Copy All\" to copy full list at once\n    \n    4. **Navigation & View Toggle**\n    - Sidebar or sticky top nav on desktop, dropdown on mobile\n    - Filter by category or toggle:\n      - “All Prompts”\n      - “Pinned Prompts”\n    - Optional search bar with live filter (name, category, content)\n    \n    5. **Prompt Display**\n    - Clean, compact prompt rows\n    - Each includes:\n      - Prompt name\n      - Buttons: View, Copy, Pin\n    - Expanded view shows full prompt (with `[TOPIC]` applied)\n    - Keep spacing tight and button grouping consistent\n    \n    6. **Personalized Prompts**\n    - If `[TOPIC]` is set:\n      - Show separate section: “Prompts\n  for: [TOPIC]”\n      - Filtered list of prompts\n  containing `[TOPIC]`\n      - Appears above other\n  categories\n    \n    7. **Smart Suggestions (Optional)**\n    - Below each prompt or section, show “You might also like…” based on\n  category or usage\n    - Simple links or chips — no clutter\n    \n    8. **Responsive Ad Units (Optional)**\n    - Support Google AdSense (optional key-based load)\n    - Show ads only if a valid key is supplied\n    - Recommended positions:\n      - After topic input\n      - Above footer\n    - Ads should not appear between prompt rows\n    \n    ---\n    \n    Styling:\n    \n    **Overall Aesthetic:**\n    - Professional, minimal, and neutral\n    - Prioritize clarity, whitespace, and hierarchy\n    - No visual clutter or excessive color\n    \n    **Light Mode (default):**\n    - Background: #FAFAFA\n    - Font: modern sans-serif (e.g. Inter, Helvetica, Source Sans)\n    - Cards: subtle borders, light shadows\n    \n    **Dark Mode:**\n    - Background: #121212\n    - Text: #E0E0E0\n    - Buttons and accents: muted blues or teals\n    \n    ---\n    \n    💾 Logic & Functionality:\n    - All data is static, loaded from JSON\n    - No backend or login required\n    - Use localStorage for:\n      - Theme preference\n      - Pinned prompts\n      - Topic input\n    \n    - Ensure:\n      - Mobile responsiveness\n      - Keyboard accessibility\n      - Fast search + no reloads on\n  interaction\n    \n    ---\n    \n     Footer:\n    Include subtle footer:  \n    “Promptosauris · Built with AI · One prompt at a time”\n    \n    ---\n    \n     Developer Notes:\n    - Detect and replace `[TOPIC]` dynamically across preview, copy, and\n  pin\n    - Never mutate or overwrite original JSON\n    - Ensure layout remains performant for >100 prompts\n    - Keep prompt rows and action buttons clean, consistent, and tightly\n  grouped",
    "createdAt": "2025-05-18",
    "notes": "I found it hard to get something I liked! Actually pretty hard\n  designing something that's simplistic and easy enough to use. I'm 80% happy\n  with this.",
    "tool": "Bolt.new",
    "projurl": "",
    "whatWorked": "Functionality off the bat was good with some minor clean ups\n  required like removing categories from tiles.",
    "whatDidntWork": "It was difficult to get a UX that I was somewhat happy with\n  it.",
    "nextSteps": "Clean up the content. Think I can make the prompt library way\n  better with more curated prompts."
  }
]
